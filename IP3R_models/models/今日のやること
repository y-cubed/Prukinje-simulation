今日のやること
・Fraiman and Dawson の論文を読む
・Fraiman and Dawson の論文の実装をする
・実装の解読をする
・Fraian and Dawsonのモデルを実験データに近づくように
・オシレーション解析の実装をする


・FRCの機体のデータくださいなのメールをする
・



NITER = 100
tpnt = numpy.arange(0.0, 0.201, 0.001)
res = numpy.zeros([NITER, 201, 4])
res_std = numpy.zeros([201, 4])
res_std1 = numpy.zeros([201, 4])
res_std2 = numpy.zeros([201, 4])


#run simulation
for i in range(0, NITER):
		sim.reset()
		sim.setPatchCount('memb', 'A00', 1) # number of naive receptor
        	sim.setCompConc('cyt', 'IP3', (10e-6))
        	sim.setCompClamped('cyt', 'IP3', 1)
        	#sim.setCompConc('cyt', 'Ca', ca_concs[i])
        	sim.setCompClamped('cyt', 'Ca', 1)
        	#sim.setCompConc('ER', 'Ca', 150e-6) 
        	sim.setCompClamped('cyt', 'Ca', 1)

		#sim.setCompConc('cyt', 'Ca', 1)			#
		#sim.setCompCount('cyt', 'IP3', 1)			#
		#sim.setCompConc('ER', 'Ca', True)
		#sim.setCompClamped('ER', 'Ca', 150e-6)		#
		#sim.setPatchCount('memb', 'A00', 1)		#

		for t in range(0, 201):
				sim.run(tpnt[t])
				res[i, t, 0] = sim.getPatchCount('memb', 'Oa')
				res[i, t, 1] = sim.getPatchCount('memb', 'Ob')
				res[i, t, 2] = sim.getPatchCount('memb', 'Oc')
				res[i, t, 3] = sim.getCompConc('cyt','Ca')
		pylab.plot(tpnt, res[i, :, 0], color = 'blue', linewidth = 0.1)

res_mean = numpy.mean(res, 0)
res_std = numpy.std(res, 0)
res_std1 = res_mean[:, 0] + res_std[:, 0]
res_std2 = res_mean[:, 0] - res_std[:, 0]

pylab.plot(tpnt, res_mean[:, 0], color = 'black', linewidth = 2.0, label = 'mean')
pylab.plot(tpnt, res_std1, color = 'gray', linewidth = 1.0, label = 'std')
pylab.plot(tpnt, res_std2, color = 'gray', linewidth = 1.0)

pylab.xlabel('Time(sec)')
pylab.ylabel('# IP3 receptors in open state')
pylab.title('IP3 receptor model: %d iterations with Wmdirect'%NITER)
pylab.ylim(0)
pylab.legend()
pylab.show()



